##
# Exports
# iEX shell history
export ERL_AFLAGS="-kernel shell_history enabled"

export ELIXIR_EDITOR="vim +__LINE__ __FILE__"
export GOPATH=/Users/jonjon/repos/go
export PATH="$PATH:$GOPATH/bin/"
 
# export PATH=$PATH:/usr/local/apache-maven/apache-maven-3.3.3/bin
# export PATH=$PATH:/usr/local/apache-ant/apache-ant-1.9.4/bin

export JAVA_HOME=$(/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home)
export ANDROID_HOME=/Users/jonjon/Library/Android/sdk

# Weird JRUBY ssl stuff..
# See https://gist.github.com/kendagriff/adec3713b4dfe6a1abdf
alias setkeystore="export SSL_CERT_FILE=/Users/jonjon/.keystore"

export CLICOLOR=true
export LSCOLORS=exfxcxdxbxegedabagacad

##export JRUBY_OPTS="--2.0"

alias du="du -sh"
alias ls="ls -GFA"
alias lsa="ls -GFlash"
alias bx="bundle exec"

##FELIX shortcuts

alias felix1="ssh deployer@sa-dev-felixosx1.sa.moneydesktop.com"
alias felix2="ssh deployer@sa-dev-felixosx2.sa.moneydesktop.com"
alias felix3="ssh deployer@sa-dev-felixosx3.sa.moneydesktop.com"
alias felix4="ssh deployer@sa-dev-felixosx4.sa.moneydesktop.com"
alias felix5="ssh deployer@sa-dev-felixosx5.sa.moneydesktop.com"
alias felix6="ssh deployer@sa-dev-felixosx6.sa.moneydesktop.com"
alias buildfelix="cd ~/repos/felix && git checkout master && git pull && docker build -t felixandroid ."
####

### Megamind commands

alias megamind="ssh jonjon@carstensfamily.rocks -p 44"
alias lmegamind="ssh jonjon@megamind.local"

#############

########## FreeNAS commands

alias nastv="ssh jonjon@carstensfamily.rocks -p 88"
alias lnastv="ssh jonjon@freenas.local"

#### Development

alias start_nats="PB_SERVER_TYPE="protobuf/nats/runner" PB_CLIENT_TYPE="protobuf/nats/client" bundle exec rpc_server start ./config/environment.rb"

alias startmongodb="mongod --dbpath ~/mongodb/"
alias startpostgres="pg_ctl -D ~/PGDATA/ -l logfile start"
alias stoppostgres="pg_ctl -D ~/PGDATA/ -l logfile stop"

alias runit="derp PB_CLIENT_TYPE=\"protobuf/nats/client\" bundle exec rails"
########################

##### Dev shortcuts
alias sbob="ssh sb-sand-bob1.sand.internal.mx"
alias qbob="ssh po-qa-bob1.provooffice.moneydesktop.com"
alias devplatoon="ssh texan@sa-dev-platoon1"
alias usejruby="rvm use jruby-9.1.0.0"
alias useruby="rvm use ruby-2.3.0"
alias dockerdaemon="/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh"
alias sshrorschachsandbox="ssh rorschachsandbox"
alias cddatastream=go_to_vzwmdn

function go_to_vzwmdn {
  cd ~/repos/vzwmdn/$1
}

alias sshrorschach1="ssh rorschach1"
alias sshrorschach2="ssh rorschach2"
alias sshrorschach3="ssh rorschach3"

alias jrbdev='JRUBY_OPTS="$JRUBY_OPTS --dev"'
alias jrbdebug='JRUBY_OPTS="$JRUBY_OPTS --debug"'
alias moarjrbram='JRUBY_OPTS="$JRUBY_OPTS -J-Xmx1024m"'
alias jrbssl='SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem'
alias derp='PB_IGNORE_DEPRECATIONS=1'
alias mx_ssl='MX_INTERNAL_ROOT_CA_PATH=/etc/openssl/cert.pem'
alias mxtreb="rvm ruby-2.6.1 do treb"
alias turbo='jrbdev jrbdebug derp mx_ssl moarjrbram'
alias startrpc='PB_SERVER_TYPE="protobuf/nats/runner" PB_CLIENT_TYPE="protobuf/nats/client" bundle exec rpc_server start ./config/environment.rb'

alias fetch_job_log=find_job_log

function find_job_log {
  echo $2
  if [ "$1" == "production" ]; then
    echo -e "\nSEARCHING RORSCHACH PRODUCTION 1\n"
    ssh rorschach1 bash -c "'grep $2 ~/apps/rorschach/current/log/production.log'"
    echo -e "\nSEARCHING RORSCHACH PRODUCTION 2\n"
    ssh rorschach2 bash -c "'grep $2 ~/apps/rorschach/current/log/production.log'"
    echo -e "\nSEARCHING RORSCHACH PRODUCTION 3\n"
    ssh rorschach3 bash -c "'grep $2 ~/apps/rorschach/current/log/production.log'"
  else
    ssh rorschachsandbox bash -c "'grep $2 ~/apps/rorschach/current/log/production.log'"
  fi
}

#### General
alias too_many_honeybadgers="/Users/jonjon/repos/scripts/email_sweeper.sh"


#### iTerm functions
iterm2_print_user_vars() {
  iterm2_set_user_var gitBranch $((git branch 2> /dev/null) | grep \* | cut -c3-)
}

# Set tab title
#function title {
#   if [ "$1" ]
#    then
#        export PROMPT_COMMAND='iterm2_preexec_invoke_cmd'
#        echo -ne "\033]0;${*}\007"
#    else
#        export PROMPT_COMMAND='echo -ne "\033]0;${PWD##*/}\007";iterm2_preexec_invoke_cmd'
#    fi
#}

## Rebuild the windowless browser
function rebuild_browser {
  build_path="/Users/jonjon/repos/vzwmdn/alloy/osx/build"
  echo "Removing old build..."
  rm -rf $build_path/*
  echo "cd into build dir..."
  cd $build_path
  echo "Pulling master"
  git checkout master && git pull
  echo "cmake .."
  cmake ..
  echo "building browser"
  make
}

## Search dash
function dash {
  if [ "$1" ]
  then
    open dash://$1
  else
    echo -ne "‼️ Nope‼️  \033[4m\033[34mYou forgot to put a query in...\033[0m"
  fi
}

## Open Gitlab repo page
function gitlab {
  if [ "$1" ]
  then
    open https://gitlab.mx.com/mx/$1
  else
    dirname=${PWD##*/}
    open https://gitlab.mx.com/mx/$dirname
  fi
}

## Deploy scripts
function prep {
  echo -e -n "\033[34m** Prepping"
  case "$1" in
    qa)
      sourcebranch=master
      targetbranch=qa
      echo -e "\033[33m QA \033[34m[master -> qa]\033[0m"
    ;;
    stable)
      sourcebranch=qa
      targetbranch=stable
      echo -e "\033[33m STABLE \033[34m[qa -> stable]\033[0m"
    ;;
    *) echo -e "\033[31m NOTHING!\nExiting..."
      return
    ;;
  esac

  if [ "$2" ] && [ "$2" != "--skip-prep" ]; then
    echo -e "\n\033[34m=> cd /Users/jonjon/repos/\033[32m$2\033[0m"
    cd /Users/jonjon/repos/$2

    if [ $? -eq 1 ]; then
      echo -e "\033[31m Failed to cd /Users/jonjon/repos/\033[32m$2\n\033[31mExiting...\033[0m"
      return 1
    fi
  fi

  echo -e "\n\033[34m=> git checkout $sourcebranch\033[0m\n"
  git checkout $sourcebranch
  echo -e "\n\033[34m=> git pull origin $sourcebranch --prune\033[0m\n"
  git pull origin $sourcebranch --prune
  echo -e "\n\033[34m=> git checkout $targetbranch\033[0m\n"
  git checkout $targetbranch
  echo -e "\n\033[34m=> git pull origin $targetbranch --prune\033[0m\n"
  git pull origin $targetbranch --prune
  echo -e "\n\033[34m=> git merge $sourcebranch\033[0m\n"
  git merge $sourcebranch

  echo -e -n "\033[34mContinue with deploy? (y|n): \033[0m"
  read -r

  case "$REPLY" in
    y)
      echo -e "\n\033[34m=> git push origin $targetbranch\033[0m\n"
      git push origin $targetbranch
      # echo -e "\n\033[34m=> bundle install\033[0m\n"
      # bundle install
      echo -e "\n\033[34m** All Prepped!!\033[0m\n"
      return 0
    ;;
    *)
      echo -e "\033[31m Skipping push to $targetbranch!\nExiting..."
      return 1
  esac
}

function deploy {
  skipprep=false

  if [[ $2 = "--skip-prep" ]]; then
    skipprep=true
  fi

  if [[ $3 = "--skip-prep" ]]; then
    skipprep=true
  fi

  case "$1" in
    sand)
      appname=${PWD##*/}
      git checkout master
      git pull --prune
      mxtreb sand deploy
    ;;
    qa)
      if [ $skipprep = false ]; then
        prep qa $2
      fi

      if [ $? -eq 0 ] || [ $skipprep = true ]; then
	appname=${PWD##*/}
        mxtreb qa deploy --site sa,sb --skip-icinga
      fi
    ;;
    int)
      if [ $skipprep = false ]; then
        prep stable $2
      fi

      if [ $? -eq 0 ] || [ $skipprep = true ]; then
        appname=${PWD##*/}
	mxtreb int deploy
      fi
    ;;
    prod)
      if [ $skipprep = false ]; then
        prep stable $2
      fi

      if [ $? -eq 0 ] || [ $skipprep = true ]; then
        appname=${PWD##*/}
	mxtreb prod deploy --site sd,se
      fi
    ;;
    corp)
      if [ $skipprep = false ]; then
        prep stable $2
      fi

      if [ $? -eq 0 ] || [ $skipprep = true ]; then
        appname=${PWD##*/}
	mxtreb corp deploy
      fi
    ;;
    stable)
      if [ $skipprep = false ]; then
        prep stable $2
      fi

      if [ $? -eq 0 ] || [ $skipprep = true ]; then
        currentdir=`pwd`
	appname=${PWD##*/}
        case "$2" in
        gringotts)
          osascript\
          -e "tell application \"iTerm\""\
          -e "tell current session of current window"\
          -e "tell (split vertically with default profile)"\
          -e "write text \"cd $currentdir\""\
          -e "write text \"bx cap aws_int deploy\""\
          -e "end tell"\
          -e "end tell"\
          -e "end tell"

          bx cap aws deploy
        ;;
        *)
          osascript\
          -e "tell application \"iTerm\""\
          -e "tell current session of current window"\
          -e "tell (split vertically with default profile)"\
          -e "write text \"cd $currentdir\""\
          -e "write text \"mxtreb int deploy\""\
          -e "end tell"\
          -e "end tell"\
          -e "end tell"

          mxtreb prod deploy --site sd,se
        ;;
        esac
      fi
    ;;
    *)
      echo -e -n "UNKNOWN ENV:\033[31m $1 \033[0m"
      return 1
    ;;
  esac

  status=$?
  notify_deploy_finished $status
  
  if [ $status -eq 0 ]; then
    # notify_deploy_finished $appname success $1
    echo -e -n "\033[32m 🚀  $appname deploy finished! \033[0m"
  else
    # notify_deploy_finished $appname failure $1
    echo -e -n "\033[31m ☠️  $appname deploy failed! \033[0m"
  fi
}

# -e "write text \"mxtreb prod deploy --site sd,se\""\

function notify_deploy_finished {
  status=$1
  env=`fc -nl -2 | grep -oE "mxtreb (sand|qa|int|prod) deploy" | cut -d ' ' -f2`
  appname=${PWD##*/}
  branch=`git branch | grep \* | cut -d ' ' -f2`

  if [ $status -eq 0 ]; then
    # success
    emoji=":white_check_mark:"
    sentiment="success"
  else
    # failure
    emoji=":skull_and_crossbones:"
    sentiment="failure"
  fi

  curl -X POST "https://hooks.slack.com/services/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" \
  -H 'Content-Type: application/json' \
  -d "{'channel':'@jonjon','username':'deployer_$appname','text':'[$env] $appname -> Deploy $sentiment','icon_emoji':'$emoji'}"
}

function slack_it {
  notify_deploy_finished $1
}

## Dominion Deck Generator
alias dominion="/Users/jonjon/repos/dominion/randomizer.rb generate $@"

#### Github Shorcuts
alias branch_cleanup="git branch --merged | grep -v '\*' | grep -v master | grep -v dev | xargs -n 1 git branch -d"
#alias metablame="git grep -n $1 | while IFS=: read i j k; do git blame -L $j,$j $i | grep -v -F -f 'current-employee-git-handles.txt' | cat; done"

function metablame {
  git grep -n $1 | while IFS=: read i j k; do git blame -L $j,$j $i | grep -v -F -f 'current-employee-git-handles.txt' | cat; done
}

### C++ stuff
LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:"${LD_LIBRARY_PATH}"
CPATH=/usr/local/opt/openssl/include:"${CPATH}"

#  export LDFLAGS="-L/usr/local/opt/openssl/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl/include"

PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig:"${PKG_CONFIG_PATH}"
export LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH

alias psftp="/Users/jonjon/repos/personetics_sftp"

function gogo {
  cd $GOPATH/src/gitlab.mx.com/mx/$1_go
}

##
# Quickly navigate repos
#
repos () {
  cd ~/repos
  builtin cd "$1"
}

_repos() {
  local cur prev reposdir=/Users/jonjon/repos
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  k=0
  # echo -e "\nn"
  # echo -e "$cur"

  # if [ -n "$prev" ]; then
  #   options=$( compgen -f "$reposdir/$prev" )
  # else
  #   options=$( compgen -f "$reposdir/$cur" )
  # fi
    options=$( compgen -d -- "$reposdir/$cur" )

    for result in $options; do # loop trough the possible completions
      # echo ${t##*/} # get last of string
      short=${result##*/}
      pre=${result#$short}
      if [ -d "$result" ] && result="${result}/"; then
      slash_count=$(awk -F"/" '{print NF-1}' <<< "${result}")
      # COMPREPLY[k++]="$pre$red$short" # strip dir from result
      COMPREPLY[k++]=${result#$reposdir/} # strip dir from result
      # COMPREPLY[k++]=${result} # strip dir from result
      fi
    done
    return 0
  # if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
  # fi
  
}

_comp_cd()
{
    local IFS=$' \t\n'    # normalize IFS
    local cur _skipdot _cdpath
    local i j k

    # Tilde expansion, which also expands tilde to full pathname
    # case "$2" in
    # \~*)    eval cur="$2" ;;
    # *)      cur=$2 ;;
    # esac

    # if [ ! -n "$2" ]; then
    #   cur=/Users/jonjon/repos/
    # else
    #   cur=/Users/jonjon/repos/$2
    # fi

    CDPATH=/Users/jonjon/repos/$2

    # no cdpath or absolute pathname -- straight directory completion
    if [[ -z "${CDPATH:-}" ]]; then
        # compgen prints paths one per line; could also use while loop
        IFS=$'\n'
        COMPREPLY=( $(compgen -d -- "$cur") )
        IFS=$' \t\n'
    # CDPATH+directories in the current directory if not in CDPATH
    else
        IFS=$'\n'
        _skipdot=false
        # preprocess CDPATH to convert null directory names to .
        # _cdpath=${CDPATH/#:/.:}
        # _cdpath=${_cdpath//::/:.:}
        # _cdpath=${_cdpath/%:/:.}
        for i in ${CDPATH//:/$'\n'}; do
            if [[ $i -ef . ]]; then _skipdot=true; fi
            k="${#COMPREPLY[@]}"
            for j in $( compgen -d -- "$i/$cur" ); do
                COMPREPLY[k++]=${j#$i/}        # cut off directory
            done
        done
        $_skipdot || COMPREPLY+=( $(compgen -d -- "$cur") )
        IFS=$' \t\n'
    fi

    # variable names if appropriate shell option set and no completions
    if shopt -q cdable_vars && [[ ${#COMPREPLY[@]} -eq 0 ]]; then
        COMPREPLY=( $(compgen -v -- "$cur") )
    fi

    return 0
}

complete -o nospace -F _repos repos
# complete -o nospace -F _reps_test repos
## End
